@page "/articles/{id:int}"

@using TicketingSystemFrontend.Client.DTOs
@using TicketingSystemFrontend.Client.Services.Interfaces
@using TicketingSystemFrontend.Client.Services.Extensions
@using Microsoft.AspNetCore.Components.Authorization
@using TicketingSystemFrontend.Client.Services.Interfaces.Auth
@inject IJSRuntime JS
@inject IArticleService ArticleService
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<h3>Article Details</h3>

@if (article == null || isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">@article.Title</h5>
            <h6 class="card-subtitle mb-2 text-muted">
                By @article.UserName | Category: @article.ArticleCategoryName
            </h6>
            <h6 class="card-subtitle mb-2 text-muted">
                Created: @article.CreatedAt
            </h6>

            @if (article.UpdatedAt != null)
            {
                <h6 class="card-subtitle mb-2 text-muted">
                    Edited: @article.UpdatedAt
                </h6>
            }

            <p class="card-text">@article.Description</p>

            <h6>Attachments:</h6>
            @if (articleFiles.Count == 0)
            {
                <p><em>No files attached.</em></p>
            }
            else
            {
                <ul>
                    @foreach (var f in articleFiles)
                    {
                        <li>
                            <button class="btn btn-link" @onclick="() => DownloadFile(f.Id, f.FileName)">
                                Download @f.FileName
                            </button>

                            @if (isAdmin || (UserId == article.UserId))
                            {
                                <button class="btn btn-sm btn-danger ms-2" @onclick="() => DeleteFile(f.Id)">
                                    Delete
                                </button>
                            }
                        </li>
                    }
                </ul>
            }

            @if (isAdmin || (UserId == article.UserId))
            {
                <div class="mt-3">
                    <a class="btn btn-primary me-2" href="/articles/edit/@id">Update</a>
                    <button class="btn btn-danger" @onclick="DeleteArticle">Delete</button>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public int id { get; set; }

    private ArticleDto? article;
    private List<FileDto> articleFiles = new();

    public Guid UserId { get; set; }

    private bool isLoading = true;
    private bool isAdmin = false;
    private bool isAgent = false;
    private bool isEndUser = false;

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            isAdmin = user.IsInRole("Admin");
            isAgent = user.IsInRole("Agent");
            isEndUser = user.IsInRole("EndUser");
            UserId = await AuthService.GetUserIdFromTokenAsync();
        }

        article = await ArticleService.GetByIdAsync(id);
        articleFiles = await ArticleService.GetFilesAsync(id);
        

        isLoading = false;
    }

    private async Task DeleteArticle()
    {
        var success = await ArticleService.DeleteByIdAsync(id);
        if (success)
        {
            Navigation.NavigateTo("/articles");
        }
        else
        {
            Console.WriteLine("Failed to delete article");
        }
    }

    private async Task DownloadFile(int fileId, string fileName)
    {
        var bytes = await ArticleService.DownloadFileAsync(id, fileId);
        var base64 = Convert.ToBase64String(bytes);
        await JS.InvokeVoidAsync("downloadFileFromBytes", fileName, base64);
    }

    private async Task DeleteFile(int fileId)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this file?");
        if (!confirmed) return;

        try
        {
            await ArticleService.DeleteFileAsync(id, fileId);
            articleFiles = await ArticleService.GetFilesAsync(id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting file: {ex.Message}");
        }
    }
}
