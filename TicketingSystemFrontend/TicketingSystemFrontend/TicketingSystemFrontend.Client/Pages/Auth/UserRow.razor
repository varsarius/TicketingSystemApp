@using TicketingSystemFrontend.Client.Services.Interfaces.Auth
@using static TicketingSystemFrontend.Client.Pages.Auth.AdminPanel
@inject IUserService UserService

<tr>
    <td>@User.Email</td>
    <td>@User.UserName</td>
    <td>
        <select @bind="selectedRole" class="form-select form-select-sm">
            <option value="EndUser">EndUser</option>
            <option value="Agent">Agent</option>
            <option value="Admin">Admin</option>
        </select>
    </td>
    <td>
        <button class="btn btn-primary btn-sm" @onclick="OnChangeRoleClicked">Change Role</button>
    </td>
</tr>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <tr>
        <td colspan="4">
            <div class="alert alert-danger">@errorMessage</div>
        </td>
    </tr>
}

@code {
    [Parameter]
    public UserDto User { get; set; } = default!;


    private string selectedRole = "";
    private string? errorMessage;

    protected override void OnParametersSet()
    {
        selectedRole = User.Role;
    }

    private async Task OnChangeRoleClicked()
    {
        errorMessage = null; // reset previous error
        try
        {
            await UserService.UpdateUserRoleAsync(User.UserName, selectedRole);

            Console.WriteLine($"Change role for {User.Email} to {selectedRole}");
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = $"Server error: {httpEx.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
        }
    }
}
