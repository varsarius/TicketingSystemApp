@using TicketingSystemFrontend.Client.DTOs
@using TicketingSystemFrontend.Client.Services.Extensions
@using TicketingSystemFrontend.Client.Services.Interfaces
@inject IJSRuntime JS
@inject IFileService FileService

@if (Files.Count == 0)
{
    <p><em>No files attached.</em></p>
}
else
{
    <ul>
        @foreach (var f in Files)
        {
            <ExistingFileElement File="f" ArticleId="ArticleId" OnFileDeleted="HandleFileDeleted" EntityType="@EntityType" />
        }
    </ul>
}

@code {
    [Parameter]
    public List<FileDto> Files { get; set; } = new();

    [Parameter]
    public int ArticleId { get; set; }

    [Parameter]
    public EventCallback<FileDto> OnFileDeleted { get; set; }

    //parameter for indicating which entity to show (string parameter)
    [Parameter]
    public string EntityType { get; set; }


    private async Task HandleFileDeleted(FileDto file)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {file.FileName}?");
        if (confirmed)
        {
            try
            {
                await FileService.DeleteAsync(ArticleId, file.Id, EntityType);
                await OnFileDeleted.InvokeAsync(file); // Notify parent to refresh or remove the file
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting file: {ex.Message}");
                await JS.InvokeVoidAsync("alert", "Failed to delete file.");
            }
        }
    }
}