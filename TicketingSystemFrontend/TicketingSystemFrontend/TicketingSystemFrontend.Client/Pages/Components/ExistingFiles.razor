@using TicketingSystemFrontend.Client.DTOs
@using TicketingSystemFrontend.Client.Services.Interfaces
@inject IJSRuntime JS
@inject IFileService FileService

@if (Files.Count == 0)
{
    <p><em>No files attached.</em></p>
}
else
{
    <ul>
        @foreach (var f in Files)
        {
            <ExistingFileElement File="f" EntityApiType="EntityApiType" EntityId="EntityId" OnFileDeleted="HandleFileDeleted" />
        }
    </ul>
}

@code {
    private List<FileDto> Files { get; set; } = new();

    [Parameter]
    public string EntityApiType { get; set; } = string.Empty;

    [Parameter]
    public int EntityId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Files = await FileService.GetFilesAsync(EntityId, EntityApiType) ?? new List<FileDto>();
    }

    private async Task HandleFileDeleted(FileDto file)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {file.FileName}?");
        if (confirmed)
        {
            try
            {
                await FileService.DeleteAsync(EntityId, file.Id, EntityApiType);
                Files.Remove(file); // Update local list
                StateHasChanged(); // Refresh UI
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting file: {ex.Message}");
                await JS.InvokeVoidAsync("alert", "Failed to delete file.");
            }
        }
    }
}