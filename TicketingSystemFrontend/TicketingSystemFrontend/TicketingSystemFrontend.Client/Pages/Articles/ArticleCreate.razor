@page "/articles/create"

@using MudBlazor
@using TicketingSystemFrontend.Client.DTOs
@using TicketingSystemFrontend.Client.Requests
@using TicketingSystemFrontend.Client.Services.Interfaces
@inject IArticleService ArticleService
@inject IArticleCategoryService ArticleCategoryService

@inject NavigationManager Navigation

<h3>Create New Article</h3>

<EditForm Model="newArticle" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="title" class="form-label">Title</label>
        <InputText id="title" class="form-control" @bind-Value="newArticle.Title" />
    </div>

    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <InputTextArea id="description" class="form-control" @bind-Value="newArticle.Description" rows="5" />
    </div>

    <div class="mb-3">
        <label for="category" class="form-label">Category</label>
        <div class="d-flex align-items-center">
            <InputSelect id="category" class="form-control me-5" @bind-Value="newArticle.ArticleCategoryId">
                <option value="">-- Select a category --</option>
                @foreach (var category in categories)
                {
                    <option value="@category.Id">@category.CategoryName</option>
                }
            </InputSelect>
            <button class="btn btn-primary" type="button" @onclick="EditCategories">Edit Categories</button>
        </div>
    </div>


    <button type="submit" class="btn btn-primary me-2">Create</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>

<hr />
<MudPaper Class="pa-6 d-flex justify-center align-center"
          Style="border:2px dashed var(--mud-palette-primary); min-height:150px; cursor:pointer"
          @ondrop="OnDrop"
          @ondragover:preventDefault>
    <div>
        <MudIcon Icon="@Icons.Material.Filled.CloudUpload" Size="Size.Large" Color="Color.Primary" />
        <MudText Typo="Typo.subtitle1">Drag & drop files here or click below</MudText>
        <InputFile OnChange="OnFilesChanged" multiple class="border" />
    </div>
</MudPaper>

@if (files.Any())
{
    <MudTable Items="files" Dense="true">
        <HeaderContent>
            <MudTh>File Name</MudTh>
            <MudTh>Size (MB)</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd>@(Math.Round(context.Size / 1024.0 / 1024.0, 2))</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               OnClick="@(() => RemoveFile(context))" />
            </MudTd>
        </RowTemplate>
    </MudTable>
    <MudText>Total size: @Math.Round(files.Sum(f => f.Size) / 1024.0 / 1024.0, 2) MB</MudText>
}

@code {
    private ArticleCreateRequest newArticle = new();
    private List<ArticleCategoryDto> categories = [];

    protected override async Task OnInitializedAsync()
    {
        categories = await ArticleCategoryService.GetAllArticleCategoriesAsync();
    }

    private async Task HandleValidSubmit()
    {
        await ArticleService.CreateAsync(newArticle);
        Navigation.NavigateTo("/articles");
    }

    private void EditCategories()
    {
        Navigation.NavigateTo("/articles/create/categories");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/articles");
    }

    private List<IBrowserFile> files = new();

    private void OnFilesChanged(InputFileChangeEventArgs e)
    {
        files.AddRange(e.GetMultipleFiles());
    }

    private void OnDrop(DragEventArgs e)
    {
        // Normally, files are handled via <InputFile>
        // Direct drag-drop without <InputFile> requires JS interop
        // So here we just prevent default behavior
    }

    private void RemoveFile(IBrowserFile file)
    {
        files.Remove(file);
    }
}
