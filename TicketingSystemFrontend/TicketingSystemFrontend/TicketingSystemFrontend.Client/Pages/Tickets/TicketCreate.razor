@page "/tickets/create"
@using System.ComponentModel.DataAnnotations
@using TicketingSystemFrontend.Client.DTOs
@using TicketingSystemFrontend.Client.Requests
@using TicketingSystemFrontend.Client.Requests.Enums
@using TicketingSystemFrontend.Client.Services
@using TicketingSystemFrontend.Client.Services.Interfaces
@inject ITicketService TicketService
@inject ITicketCategoryService TicketCategoryService


@inject NavigationManager Navigation

<PageTitle>Create Ticket</PageTitle>

<h3>Create a New Ticket</h3>

<EditForm Model="@ticketRequest" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="title" class="form-label">Title</label>
            <InputText id="title" class="form-control" @bind-Value="ticketRequest.Title" />
            <ValidationMessage For="@(() => ticketRequest.Title)" />
        </div>

        <div class="col-md-6">
            <label for="category" class="form-label">Category</label>
            @* TO CHANGE LATER *@
            @* <InputSelect id="category" class="form-select" @bind-Value="ticketRequest.Category">
                <option value="">-- Select --</option>
                @foreach (var category in categories)
                {
                    <option value="@category.Id">@category.CategoryName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => ticketRequest.Category)" /> *@

        </div>

    </div>

    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <InputTextArea id="description" class="form-control" rows="4" @bind-Value="ticketRequest.Description" />
        <ValidationMessage For="@(() => ticketRequest.Description)" />
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="priority" class="form-label">Priority</label>
            <InputSelect id="priority" class="form-select" @bind-Value="ticketRequest.Priority">
                <option value="">-- Select --</option>
                @foreach (Priority priority in Enum.GetValues(typeof(Priority)))
                {
                    <option value="@priority">@priority</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => ticketRequest.Priority)" />
        </div>

        <div class="col-md-6">
            <label for="file" class="form-label">Attachment (optional)</label>
            <InputFile OnChange="HandleFileChange" multiple/>
        </div>

    </div>

    <div class="d-flex justify-content-between">
        <button class="btn btn-primary" type="submit">Submit Ticket</button>

        <a class="btn btn-success" href="/tickets/create/categories">Edit Categories</a>
    </div>


</EditForm>


@code {
    private TicketCreateRequest ticketRequest = new();
    private List<ArticleCategoryDto> categories = [];

    private async Task HandleValidSubmit()
    {
        var request = new TicketCreateRequest
        {
            Title = ticketRequest.Title,
            Description = ticketRequest.Description,
            Priority = ticketRequest.Priority,
        };

        try
        {
            await TicketService.CreateAsync(request);
            // Optional: Navigate or show success message
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine("Ticket creation failed: " + ex.Message);
        }
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        Console.WriteLine($"File selected: {file.Name} ({file.Size} bytes)");
        // TODO: Save to backend or buffer
    }

    public class TicketInputModel
    {
        [Required]
        public string Title { get; set; }

        [Required]
        public string Category { get; set; }

        [Required]
        public string Description { get; set; }

        [Required]
        public Priority? Priority { get; set; }

    }
}
