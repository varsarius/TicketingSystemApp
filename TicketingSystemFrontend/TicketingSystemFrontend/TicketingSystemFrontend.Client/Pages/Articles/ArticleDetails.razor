@page "/articles/{id:int}"

@using TicketingSystemFrontend.Client.DTOs
@using TicketingSystemFrontend.Client.Pages.Components
@using TicketingSystemFrontend.Client.Services.Interfaces
@using TicketingSystemFrontend.Client.Services.Extensions
@inject IJSRuntime JS
@inject IArticleService ArticleService
@inject NavigationManager Navigation

<h3>Article Details</h3>

@if (article == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">@article.Title</h5>
            <h6 class="card-subtitle mb-2 text-muted">
                By @article.UserName | Category: @article.ArticleCategoryName
            </h6>
            <h6 class="card-subtitle mb-2 text-muted">
                Created: @article.CreatedAt
            </h6>

            @if (article.UpdatedAt != null)
            {
                <h6 class="card-subtitle mb-2 text-muted">
                    Edited: @article.UpdatedAt
                </h6>
            }
            <p class="card-text">@article.Description</p>

            <h6>Attachments:</h6>
            <ExistingFiles EntityApiType="articles" Id="@id" />

            <div class="mt-3">
                <a class="btn btn-primary me-2" href="/articles/edit/@id">Update</a>
                <button class="btn btn-danger" @onclick="DeleteArticle">Delete</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int id { get; set; }

    private ArticleDto? article;

    protected override async Task OnParametersSetAsync()
    {
        article = await ArticleService.GetByIdAsync(id);
    }

    private async Task DeleteArticle()
    {
        var success = await ArticleService.DeleteByIdAsync(id);
        if (success)
        {
            Navigation.NavigateTo("/articles");
        }
        else
        {
            Console.WriteLine("Failed to delete article");
            await JS.InvokeVoidAsync("alert", "Failed to delete article.");
        }
    }
}