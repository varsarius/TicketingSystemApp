@page "/articles/edit/{id:int}"

@using TicketingSystemFrontend.Client.DTOs
@using TicketingSystemFrontend.Client.Pages.Components
@using TicketingSystemFrontend.Client.Requests
@using TicketingSystemFrontend.Client.Services.Extensions
@using TicketingSystemFrontend.Client.Services.Interfaces
@inject IArticleService ArticleService
@inject IArticleCategoryService ArticleCategoryService
@inject NavigationManager Navigation

<h3>Edit Article</h3>

@if (article == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="articleEditRequest" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="title" class="form-label">Title</label>
            <InputText id="title" class="form-control" @bind-Value="articleEditRequest.Title" />
        </div>

        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <InputTextArea id="description" class="form-control" @bind-Value="articleEditRequest.Description" rows="5" />
        </div>

        <div class="mb-3">
            <label for="category" class="form-label">Category</label>
            <div class="d-flex align-items-center">
                <InputSelect id="category" class="form-control me-5" @bind-Value="articleEditRequest.ArticleCategoryId">
                    <option value="">-- Select a category --</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category.Id">@category.CategoryName</option>
                    }
                </InputSelect>
            </div>
        </div>

        <FileForm @bind-Files="files" />

        <button type="submit" class="btn btn-success me-2">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public int id { get; set; }
    private List<ArticleCategoryDto> categories = [];
    private List<IBrowserFile> files = new();

    private ArticleDto? article;
    private ArticleUpdateRequest articleEditRequest = new();

    protected override async Task OnInitializedAsync()
    {
        categories = await ArticleCategoryService.GetAllAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        article = await ArticleService.GetByIdAsync(id);

        if (article != null)
        {
            // Map ArticleDto to ArticleUpdateRequest
            articleEditRequest.ArticleCategoryId = article.ArticleCategoryId;
            articleEditRequest.Title = article.Title;
            articleEditRequest.Description = article.Description;
            articleEditRequest.Id = id;

            // Load existing file metadata (not used directly in files for now)
            // var existingFiles = await ArticleService.GetFilesAsync(id);
            // Note: Existing files are not loaded into 'files' as IBrowserFile requires content
            // Consider enhancing FileForm to display FileDto separately if needed
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await ArticleService.UpdateAsync(articleEditRequest);
            if (files.Any())
            {
                // Upload new files for the existing article
                await ArticleService.UploadFilesAsync(id, files);
            }
            Navigation.NavigateTo($"/articles/{id}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error updating article: {ex.Message}");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo($"/articles/{id}");
    }
}