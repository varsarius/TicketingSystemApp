@page "/articles/create/categories"
@using TicketingSystemFrontend.Client.DTOs
@using TicketingSystemFrontend.Client.Requests
@using TicketingSystemFrontend.Client.Services.Interfaces
@using TicketingSystemFrontend.Client.Pages.Articles.ArticleComponents

@inject IArticleService ArticleService
@inject IArticleCategoryService ArticleCategoryService
@inject NavigationManager Navigation

<h3>Edit Categories</h3>

@if (!categories.Any())
{
    <p><em>Loading categories...</em></p>
}
else
{
    <ul class="list-group mb-3">
        @foreach (var category in categories)
        {
            <ArticleCategoryCard Category="category"
                                 IsEditing="(editingCategoryId == category.Id)"
                                 OnStartEditing="StartEditing"
                                 OnDelete="DeleteCategory"
                                 OnSave="SaveCategory"
                                 OnCancel="CancelEditing" />
        }
    </ul>
    @if (!isCreating)
    {
        <div>
            <button type="button" class="btn btn-primary me-3" @onclick="CreateCategory">
                Create
            </button>
            <button type="button" class="btn btn-secondary" @onclick="ExitCategory">
                Exit
            </button>
        </div>
    }
    else
    {
        <input class="form-control me-3 mb-3" @bind="newCategoryName" placeholder="New category name" style="max-width: 300px;" />
        <div>
            <button class="btn btn-success me-2" @onclick="ConfirmCreate">Create</button>
            <button class="btn btn-secondary" @onclick="CancelCreate">Cancel</button>
        </div>
    }
}

@code {
    private List<ArticleCategoryDto> categories = [];
    private int? editingCategoryId = null;
    private string originalCategoryName = string.Empty;
    private bool isCreating = false;
    private string newCategoryName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        categories = await ArticleCategoryService.GetAllAsync();
    }

    private void StartEditing(ArticleCategoryDto category)
    {
        editingCategoryId = category.Id;
        originalCategoryName = category.CategoryName;
    }

    private void CancelEditing()
    {
        if (editingCategoryId.HasValue)
        {
            var cat = categories.FirstOrDefault(c => c.Id == editingCategoryId.Value);
            if (cat != null)
                cat.CategoryName = originalCategoryName;
        }
        editingCategoryId = null;
    }

    private async Task SaveCategory(ArticleCategoryDto category)
    {
        var updateRequest = new ArticleCategoryUpdateRequest
        {
            Id = category.Id,
            CategoryName = category.CategoryName
        };

        await ArticleCategoryService.UpdateAsync(updateRequest);
        Console.WriteLine($"Saving category {category.Id} with new name {category.CategoryName}");
        editingCategoryId = null;
    }

    private async Task DeleteCategory(int categoryId)
    {
        await ArticleCategoryService.DeleteByIdAsync(categoryId);
        Console.WriteLine($"Deleting category {categoryId}");
        categories.RemoveAll(c => c.Id == categoryId);
    }

    private void CreateCategory()
    {
        isCreating = true; // Show the new category input field
    }

    private void ExitCategory()
    {
        Navigation.NavigateTo("/articles/create"); // Just leave the page
    }

    private async Task ConfirmCreate()
    {
        if (!string.IsNullOrWhiteSpace(newCategoryName))
        {
            var newCategoryRequest = new ArticleCategoryCreateRequest
            {
                CategoryName = newCategoryName
            };

            await ArticleCategoryService.CreateAsync(newCategoryRequest);
            categories = await ArticleCategoryService.GetAllAsync(); // Refresh categories
            Console.WriteLine($"Created new category: {newCategoryName}");
        }
        isCreating = false;
        newCategoryName = string.Empty;
    }

    private void CancelCreate()
    {
        isCreating = false;
        newCategoryName = string.Empty;
    }
}