@page "/articles/create"

@using MudBlazor
@using TicketingSystemFrontend.Client.DTOs
@using TicketingSystemFrontend.Client.Pages.Components
@using TicketingSystemFrontend.Client.Requests
@using TicketingSystemFrontend.Client.Services.Interfaces
@using TicketingSystemFrontend.Client.Services.Extensions
@using Blazored.LocalStorage

@inject IArticleService ArticleService
@inject IArticleCategoryService ArticleCategoryService
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<h3>Create New Article</h3>

<EditForm Model="newArticle" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="title" class="form-label">Title</label>
        <InputText id="title" class="form-control" @bind-Value="newArticle.Title" />
    </div>

    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <InputTextArea id="description" class="form-control" @bind-Value="newArticle.Description" rows="5" />
    </div>

    <div class="mb-3">
        <label for="category" class="form-label">Category</label>
        <div class="d-flex align-items-center">
            <InputSelect id="category" class="form-control me-5" @bind-Value="newArticle.ArticleCategoryId">
                <option value="">-- Select a category --</option>
                @foreach (var category in categories)
                {
                    <option value="@category.Id">@category.CategoryName</option>
                }
            </InputSelect>
            <button class="btn btn-primary" type="button" @onclick="EditCategories">Edit Categories</button>
        </div>
    </div>

    <UploadFilesField OnDrop="OnDrop" OnFilesChanged="OnFilesChanged" />

    <FileListing Files="files" />

    <button type="submit" class="btn btn-primary me-2">Create</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    private ArticleCreateRequest newArticle = new();
    private List<ArticleCategoryDto> categories = new();
    private List<IBrowserFile> files = new();

    protected override async Task OnInitializedAsync()
    {
        categories = await ArticleCategoryService.GetAllAsync();
        var savedArticle = await LocalStorage.GetItemAsync<ArticleCreateRequest>("savedArticleCreate");
        if (savedArticle != null)
        {
            newArticle = savedArticle;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await LocalStorage.RemoveItemAsync("savedArticleCreate");
            var articleId = await ArticleService.CreateAsync(newArticle);
            if (files.Any() && articleId.HasValue)
            {
                await ArticleService.UploadFilesAsync(articleId.Value, files);
            }
            Navigation.NavigateTo($"/articles/{articleId}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error creating article: {ex.Message}");
        }
    }

    private async Task EditCategories()
    {
        await LocalStorage.SetItemAsync("savedArticleCreate", newArticle);
        Navigation.NavigateTo("/articles/create/categories");
    }

    private async Task Cancel()
    {
        await LocalStorage.RemoveItemAsync("savedArticleCreate");
        Navigation.NavigateTo("/articles");
    }

    private void OnFilesChanged(InputFileChangeEventArgs e)
    {
        files.Clear(); // TODO: TOFIXME: multiple sources of files. If you add some file and then another file - it will crush on upload now. and remove this line ofc.
        files.AddRange(e.GetMultipleFiles());
    }

    private void OnDrop(DragEventArgs e)
    {
        // Prevent default browser behavior
    }
}