@using TicketingSystemFrontend.Client.DTOs
@using TicketingSystemFrontend.Client.Services.Interfaces
@inject ITicketCategoryService TicketCategoryService
<div class="col-md-3 mt-5">
    <div class="card mb-3">
        <div class="card-header">
            Filter
        </div>
        <div class="card-body">
            <div class="mb-2">
                <label class="form-label">Category</label>
                <select class="form-select" @bind="selectedCategory">
                    <option value="">All</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category.Id">@category.CategoryName</option>
                    }
                </select>
            </div>
            <div class="mb-2">
                <label class="form-label">Status</label>
                <select class="form-select" @bind="selectedStatus">
                    <option value="">All</option>
                    <option>Open</option>
                    <option value="InProgress">In Progress</option>
                    <option>Resolved</option>
                    <option>Closed</option>
                </select>
            </div>
            <div class="mb-2">
                <label class="form-label">Priority</label>
                <select class="form-select" @bind="selectedPriority">
                    <option value="">All</option>
                    <option>Low</option>
                    <option>Medium</option>
                    <option>High</option>
                    <option>Critical</option>
                </select>
            </div>
            <div class="d-flex gap-2 mt-2">
                <button class="btn btn-primary w-50" @onclick="ApplyFilters">Apply</button>
                <button class="btn btn-secondary w-50" @onclick="ResetFilters">Reset</button>
            </div>

        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback<(int? categoryId, string? status, string? priority)> FiltersChanged { get; set; }

    private List<TicketCategoryDto> categories = new();

    private int? selectedCategory = null;
    private string? selectedStatus = null;
    private string? selectedPriority = null;

    private async Task ApplyFilters()
    {
        if (FiltersChanged.HasDelegate)
        {
            await FiltersChanged.InvokeAsync((selectedCategory, selectedStatus, selectedPriority));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        categories = await TicketCategoryService.GetAllAsync();
    }

    private async Task ResetFilters()
    {
        selectedCategory = null;
        selectedStatus = null;
        selectedPriority = null;

        if (FiltersChanged.HasDelegate)
        {
            await FiltersChanged.InvokeAsync((selectedCategory, selectedStatus, selectedPriority));
        }
    }

}
