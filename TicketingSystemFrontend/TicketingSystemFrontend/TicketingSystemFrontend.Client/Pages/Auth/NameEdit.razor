@using TicketingSystemFrontend.Client.Auth
@using TicketingSystemFrontend.Client.Services.Interfaces.Auth
@inject CustomAuthProvider AuthenticationStateProvider
@inject IUserService UserService
@if (userName != null)
{
    @if (!isEditing)
    {
        <div class="mb-3">
            <h3>
                <label>Name</label>
            </h3>
            <p>@userName</p>
        </div>
        <button class="btn btn-primary mb-3" @onclick="StartEditing">Edit Name</button>
    }
    else
    {
        <div class="mb-3">
            <label>Name:</label>
            <input class="form-control" @bind="userName" />
        </div>
        <div class="mb-3">
            <button class="btn btn-primary me-2" @onclick="SaveChanges">Save Changes</button>
            <button class="btn btn-secondary" @onclick="CancelEditing">Cancel</button>
        </div>
    }
}

@code {
    private string userName;
    private bool isEditing = false;
    private string originalUserName = null!;
    [Inject] private NavigationManager Navigation { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;
        if (currentUser.Identity.IsAuthenticated)
        {
            userName = currentUser.FindFirst(c => c.Type == "name")?.Value;
            originalUserName = userName;
        }
    }

    private void StartEditing()
    {
        isEditing = true;
    }

    private void CancelEditing()
    {
        // Restore original values
        userName = originalUserName;
        isEditing = false;
    }

    private async Task SaveChanges()
    {
        if (!string.IsNullOrWhiteSpace(userName))
        {
            Console.WriteLine("Changes saved");
            // Update original values
            await UserService.UpdateUserName(originalUserName, userName);
            await AuthenticationStateProvider.LogoutAsync();
            Navigation.NavigateTo("/login");
            // originalUserName = userName;

            // Here you would typically call your backend to save changes
            // if (!string.IsNullOrWhiteSpace(newPassword))
            // {
            //     var token = await UserManager.GeneratePasswordResetTokenAsync(user);
            //     await UserManager.ResetPasswordAsync(user, token, newPassword);
            // }
        }

        isEditing = false;
    }
}