@page "/tickets/create"

@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using TicketingSystemFrontend.Client.DTOs
@using TicketingSystemFrontend.Client.Requests
@using TicketingSystemFrontend.Client.Requests.Enums
@using TicketingSystemFrontend.Client.Services
@using TicketingSystemFrontend.Client.Services.Interfaces
@inject ITicketService TicketService
@inject ITicketCategoryService TicketCategoryService


@inject NavigationManager Navigation

<PageTitle>Create Ticket</PageTitle>

<h3>Create a New Ticket</h3>

<EditForm Model="@ticketRequest" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="title" class="form-label">Title</label>
            <InputText id="title" class="form-control" @bind-Value="ticketRequest.Title" />
            <ValidationMessage For="@(() => ticketRequest.Title)" />
        </div>

        <div class="col-md-6">
            <label for="category" class="form-label">Category</label>
            @* TO CHANGE LATER *@
            <InputSelect id="category" class="form-select" @bind-Value="ticketRequest.TicketCategoryId">
                <option value="">-- Select --</option>
                @foreach (var category in categories)
                {
                    <option value="@category.Id">@category.CategoryName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => ticketRequest.TicketCategoryId)" />

        </div>

    </div>

    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <InputTextArea id="description" class="form-control" rows="4" @bind-Value="ticketRequest.Description" />
        <ValidationMessage For="@(() => ticketRequest.Description)" />
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="priority" class="form-label">Priority</label>
            <InputSelect id="priority" class="form-select" @bind-Value="ticketRequest.Priority">
                <option value="">-- Select --</option>
                @foreach (Priority priority in Enum.GetValues(typeof(Priority)))
                {
                    <option value="@priority">@priority</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => ticketRequest.Priority)" />
        </div>

        <MudPaper Class="col-md-6"
                  Style="border:2px dashed var(--mud-palette-primary); min-height:150px; cursor:pointer"
                  @ondrop="OnDrop"
                  @ondragover:preventDefault>
            <div>
                <label for="files" class="form-label">Files</label>
                <MudIcon Icon="@Icons.Material.Filled.CloudUpload" Size="Size.Large" Color="Color.Primary" />
                <MudText Typo="Typo.subtitle1">Drag & drop files here or click below</MudText>
                <InputFile OnChange="OnFilesChanged" multiple class="border" />
            </div>
        </MudPaper>

        @if (files.Any())
        {
            <MudTable Items="files" Dense="true">
                <HeaderContent>
                    <MudTh>File Name</MudTh>
                    <MudTh>Size (MB)</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate Context ="newContext">
                    <MudTd>@newContext.Name</MudTd>
                    <MudTd>@(Math.Round(newContext.Size / 1024.0 / 1024.0, 2))</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       Color="Color.Error"
                                       OnClick="@(() => RemoveFile(newContext))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
            <MudText>Total size: @Math.Round(files.Sum(f => f.Size) / 1024.0 / 1024.0, 2) MB</MudText>
        }

    </div>

    <div class="d-flex justify-content-between">
        <button class="btn btn-primary" type="submit">Submit Ticket</button>

        <a class="btn btn-success" href="/tickets/create/categories">Edit Categories</a>
    </div>


</EditForm>


@code {
    private TicketCreateRequest ticketRequest = new();
    private List<TicketCategoryDto> categories = [];
    private List<IBrowserFile> files = new();

    protected override async Task OnInitializedAsync()
    {
        categories = await TicketCategoryService.GetAllAsync();
    }

    private async Task HandleValidSubmit()
    {


        var request = new TicketCreateRequest
        {
            Title = ticketRequest.Title,
            Description = ticketRequest.Description,
            Priority = ticketRequest.Priority,
            TicketCategoryId = ticketRequest.TicketCategoryId
        };

        try
        {
            var ticketId = await TicketService.CreateAsync(ticketRequest);

            // Optional: Navigate or show success message
            Navigation.NavigateTo($"/tickets/{ticketId}");

        }
        catch (Exception ex)
        {
            Console.Error.WriteLine("Ticket creation failed: " + ex.Message);
        }

    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        Console.WriteLine($"File selected: {file.Name} ({file.Size} bytes)");
        // TODO: Save to backend or buffer
    }

    private void OnDrop(DragEventArgs e)
    {
        // Prevent default browser behavior
    }

    private void OnFilesChanged(InputFileChangeEventArgs e)
    {
        files.AddRange(e.GetMultipleFiles());
    }

    private void RemoveFile(IBrowserFile file)
    {
        files.Remove(file);
    }

    public class TicketInputModel
    {
        [Required]
        public string Title { get; set; }

        [Required]
        public string Category { get; set; }

        [Required]
        public string Description { get; set; }

        [Required]
        public Priority? Priority { get; set; }

    }
}
