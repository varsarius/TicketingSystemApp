@page "/tickets/{id:int}"

@using System.ComponentModel.DataAnnotations
@using TicketingSystemFrontend.Client.DTOs
@using TicketingSystemFrontend.Client.Requests.Enums
@using TicketingSystemFrontend.Client.Services
@using TicketingSystemFrontend.Client.Services.Interfaces
@using TicketingSystemFrontend.Client.Requests;
@using Microsoft.AspNetCore.Components.Authorization
@using TicketingSystemFrontend.Client.Services.Interfaces.Auth

@inject ITicketService TicketService
@inject ITicketCommentService TicketCommentService
@inject IAuthService AuthService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<h3>Ticket Details</h3>

@if (ticket == null || isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card mb-3">
        <div class="card-body">
            <h4 class="card-title">@ticket.Title</h4>
            <h5 class="card-subtitle mb-2">Assigned to: @ticket.AgentName</h5>
            <h6 class="card-subtitle mb-2 text-muted">
                By @ticket.UserName | Category: @ticket.CategoryName
            </h6>
            <h6 class="card-subtitle mb-2 text-muted">
                Priority: <b class="@(GetPriorityClass(ticket.Priority))">@ticket.Priority </b>
            </h6>
            <h6 class="card-subtitle mb-2 text-muted">
                Status: <b class="@(GetStatusClass(ticket.Status))">@GetDisplayName(ticket.Status)</b>
            </h6>
            <h6 class="card-subtitle mb-2 text-muted">
                Created: @ticket.CreatedAt
            </h6>
            @if (ticket.UpdatedAt != null)
            {
                <h6 class="card-subtitle mb-2 text-muted">
                    Edited:  @ticket.UpdatedAt
                </h6>
            }
            <p class="card-text text-muted">@ticket.Description</p>

            @if (isAdmin || currentUserId == ticket.UserId)
            {
                <div class="mt-3">
                    <a class="btn btn-primary me-2" href="/tickets/@id/edit">Update</a>
                    <button class="btn btn-danger" @onclick="DeleteTicket">Delete</button>
                </div>
            }
        </div>
    </div>

    <div class="mt-4">
        <h5>Comments</h5>

        @if (comments == null || comments.Count == 0)
        {
            <p><em>No comments available...</em></p>
        }
        else
        {
            @foreach (var c in comments)
            {
                @if (editingCommentId == c.Id)
                {
                    <InputTextArea @bind-Value="editingCommentText" class="form-control" />
                    <div class="mb-4">
                        <button class="btn btn-sm btn-primary me-1" @onclick="SaveEditedComment">Save</button>
                        <button class="btn btn-sm btn-secondary" @onclick="() => editingCommentId = null">Cancel</button>
                    </div>
                }
                else
                {
                    <p class="card-text">@c.Description</p>
                    <small class="text-muted">By @c.UserName on @c.CreatedAt</small>

                    @if (isAdmin || currentUserId == c.UserId)
                    {
                        <div class="mb-4">
                            <button class="btn btn-sm btn-warning me-1" @onclick="() => EditComment(c)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteComment(c.Id)">Delete</button>
                        </div>
                    }
                }
            }
        }

        <EditForm Model="@this" OnValidSubmit="AddCommentAsync">
            <InputTextArea @bind-Value="newComment" class="form-control" placeholder="Leave a comment..." />
            <button type="submit" class="btn btn-primary mt-2">Post Comment</button>
        </EditForm>
    </div>
}

@code {
    [Parameter] public int id { get; set; }

    private TicketDto? ticket;
    private List<TicketCommentDto> comments = new();
    private int? editingCommentId = null;
    private string editingCommentText = string.Empty;
    private string newComment = string.Empty;

    private Guid currentUserId;
    private bool isAdmin = false;
    private bool isLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            isAdmin = user.IsInRole("Admin");
            currentUserId = await AuthService.GetUserIdFromTokenAsync();
        }

        ticket = await TicketService.GetByIdAsync(id);
        comments = await TicketService.GetCommentsByTicketIdAsync(id);

        isLoading = false;
    }

    private async Task DeleteTicket()
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this ticket?");
        if (!confirmed) return;

        var success = await TicketService.DeleteByIdAsync(id);
        if (success)
        {
            Navigation.NavigateTo("/tickets");
        }
        else
        {
            Console.WriteLine("Failed to delete ticket");
        }
    }

    private async Task AddCommentAsync()
    {
        var success = await TicketService.AddCommentAsync(id, new TicketCommentCreateRequest
        {
            TicketId = id,
            Description = newComment,
            UserId = currentUserId
        });

        if (success)
        {
            newComment = string.Empty;
            comments = await TicketService.GetCommentsByTicketIdAsync(id);
        }
    }

    private void EditComment(TicketCommentDto comment)
    {
        editingCommentId = comment.Id;
        editingCommentText = comment.Description;
    }

    private async Task SaveEditedComment()
    {
        if (editingCommentId.HasValue)
        {
            await TicketCommentService.UpdateAsync(new TicketCommentUpdateRequest
            {
                Id = editingCommentId.Value,
                Description = editingCommentText,
                ArticleId = id // if this is wrong, should be TicketId instead
            });

            comments = await TicketService.GetCommentsByTicketIdAsync(id);

            editingCommentId = null;
            editingCommentText = string.Empty;
        }
    }

    private async Task DeleteComment(int commentId)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this comment?");
        if (!confirmed) return;

        var success = await TicketCommentService.DeleteCommentAsync(id, commentId);
        if (success)
        {
            comments = await TicketService.GetCommentsByTicketIdAsync(id);
        }
    }

    private string GetPriorityClass(Priority priority) => priority switch
    {
        Priority.High => "text-danger",
        Priority.Medium => "text-warning",
        Priority.Low => "text-success",
        Priority.Critical => "text-dark"
    };

    private string GetStatusClass(Status status) => status switch
    {
        Status.Open => "text-primary",
        Status.InProgress => "text-info",
        Status.Resolved => "text-success",
        Status.Closed => "text-secondary"
    };

    private string GetDisplayName(Enum value)
    {
        var field = value.GetType().GetField(value.ToString());
        var attribute = field?.GetCustomAttributes(typeof(DisplayAttribute), false)
                              .FirstOrDefault() as DisplayAttribute;
        return attribute?.Name ?? value.ToString();
    }
}
